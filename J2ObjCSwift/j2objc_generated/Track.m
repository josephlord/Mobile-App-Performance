//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Java/src/main/java/harrycheung/map/shared/Track.java
//

#include "Gate.h"
#include "GateType.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Point.h"
#include "Track.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/json/JSONArray.h"
#include "org/json/JSONObject.h"

@interface HCMTrack ()
- (instancetype)initWithOrgJsonJSONObject:(OrgJsonJSONObject *)json;
@end

@implementation HCMTrack

- (instancetype)initWithOrgJsonJSONObject:(OrgJsonJSONObject *)json {
  if (self = [super init]) {
    OrgJsonJSONObject *jsonTrack = [((OrgJsonJSONObject *) nil_chk(json)) getJSONObjectWithNSString:@"track"];
    OrgJsonJSONArray *jsonGates = [((OrgJsonJSONObject *) nil_chk(jsonTrack)) getJSONArrayWithNSString:@"gates"];
    id<JavaUtilList> gateList = [[[JavaUtilArrayList alloc] init] autorelease];
    for (jint i = 0; i < [((OrgJsonJSONArray *) nil_chk(jsonGates)) length]; i++) {
      OrgJsonJSONObject *jsonGate = [jsonGates getJSONObjectWithInt:i];
      HCMGate *gate = [[[HCMGate alloc] initWithHCMGateTypeEnum:HCMGateTypeEnum_valueOfWithNSString_([((OrgJsonJSONObject *) nil_chk(jsonGate)) getStringWithNSString:@"gate_type"]) withInt:[jsonGate getIntWithNSString:@"split_number"] withDouble:[jsonGate getDoubleWithNSString:@"latitude"] withDouble:[jsonGate getDoubleWithNSString:@"longitude"] withDouble:[jsonGate getDoubleWithNSString:@"bearing"]] autorelease];
      if (gate->type_ == HCMGateTypeEnum_get_START_FINISH() || gate->type_ == HCMGateTypeEnum_get_START()) {
        HCMTrack_set_start_(self, gate);
      }
      [gateList addWithId:gate];
    }
    id__ = [jsonTrack getIntWithNSString:@"id"];
    HCMTrack_set_name_(self, [jsonTrack getStringWithNSString:@"name"]);
    HCMTrack_setAndConsume_gates_(self, [IOSObjectArray newArrayWithLength:[gateList size] type:HCMGate_class_()]);
    [gateList toArrayWithNSObjectArray:gates_];
    NSAssert((id__ != 0), @"harrycheung/map/shared/Track.java:42 condition failed: assert(id != 0);");
    NSAssert((name_ != nil), @"harrycheung/map/shared/Track.java:43 condition failed: assert(name != null);");
    NSAssert((start_ != nil), @"harrycheung/map/shared/Track.java:44 condition failed: assert(start != null);");
  }
  return self;
}

+ (IOSObjectArray *)load__WithNSString:(NSString *)json {
  return HCMTrack_load__WithNSString_(json);
}

- (jint)numSplits {
  return ((IOSObjectArray *) nil_chk(gates_))->size_;
}

- (jdouble)distanceToStartWithDouble:(jdouble)latitude
                          withDouble:(jdouble)longitude {
  return [((HCMGate *) nil_chk(start_)) distanceToWithHCMPoint:[[[HCMPoint alloc] initWithDouble:latitude withDouble:longitude] autorelease]];
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(gates_);
  RELEASE_(start_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(HCMTrack *)other {
  [super copyAllFieldsTo:other];
  HCMTrack_set_name_(other, name_);
  HCMTrack_set_gates_(other, gates_);
  other->id__ = id__;
  HCMTrack_set_start_(other, start_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgJsonJSONObject:", "Track", NULL, 0x2, "Ljava.lang.Exception;" },
    { "load__WithNSString:", "load", "[Lharrycheung.map.shared.Track;", 0x9, NULL },
    { "numSplits", NULL, "I", 0x1, NULL },
    { "distanceToStartWithDouble:withDouble:", "distanceToStart", "D", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x1, "Ljava.lang.String;", NULL,  },
    { "gates_", NULL, 0x4, "[Lharrycheung.map.shared.Gate;", NULL,  },
    { "id__", "id", 0x4, "I", NULL,  },
    { "start_", NULL, 0x4, "Lharrycheung.map.shared.Gate;", NULL,  },
  };
  static const J2ObjcClassInfo _HCMTrack = { 1, "Track", "harrycheung.map.shared", NULL, 0x11, 4, methods, 4, fields, 0, NULL};
  return &_HCMTrack;
}

@end

IOSObjectArray *HCMTrack_load__WithNSString_(NSString *json) {
  HCMTrack_init();
  @try {
    if ([((NSString *) nil_chk(json)) hasPrefix:@"["]) {
      OrgJsonJSONArray *jsonArray = [[[OrgJsonJSONArray alloc] initWithNSString:json] autorelease];
      IOSObjectArray *array = [IOSObjectArray arrayWithLength:[jsonArray length] type:HCMTrack_class_()];
      for (jint i = 0; i < [jsonArray length]; i++) {
        IOSObjectArray_SetAndConsume(array, i, [[HCMTrack alloc] initWithOrgJsonJSONObject:[jsonArray getJSONObjectWithInt:i]]);
      }
      return array;
    }
    else {
      return [IOSObjectArray arrayWithObjects:(id[]){ [[[HCMTrack alloc] initWithOrgJsonJSONObject:[[[OrgJsonJSONObject alloc] initWithNSString:json] autorelease]] autorelease] } count:1 type:HCMTrack_class_()];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HCMTrack)
