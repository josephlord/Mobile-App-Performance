//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Java/src/main/java/harrycheung/map/shared/Gate.java
//

#include "Gate.h"
#include "GateType.h"
#include "J2ObjC_source.h"
#include "Physics.h"
#include "Point.h"

@interface HCMGate () {
 @public
  HCMPoint *leftPoint_, *rightPoint_;
}
@end

J2OBJC_FIELD_SETTER(HCMGate, leftPoint_, HCMPoint *)
J2OBJC_FIELD_SETTER(HCMGate, rightPoint_, HCMPoint *)

@implementation HCMGate

- (instancetype)initWithHCMGateTypeEnum:(HCMGateTypeEnum *)type
                                withInt:(jint)splitNumber
                             withDouble:(jdouble)latitude
                             withDouble:(jdouble)longitude
                             withDouble:(jdouble)bearing {
  if (self = [super initWithDouble:latitude withDouble:longitude withDouble:bearing]) {
    HCMGate_set_type_(self, type);
    self->splitNumber_ = splitNumber;
    jdouble leftBearing = bearing - 90 < 0 ? bearing + 270 : bearing - 90;
    jdouble rightBearing = bearing + 90 > 360 ? bearing - 270 : bearing + 90;
    HCMGate_set_leftPoint_(self, [self destinationWithDouble:leftBearing withDouble:HCMGate_LINE_WIDTH / 2]);
    HCMGate_set_rightPoint_(self, [self destinationWithDouble:rightBearing withDouble:HCMGate_LINE_WIDTH / 2]);
  }
  return self;
}

- (HCMPoint *)crossedWithHCMPoint:(HCMPoint *)start
                     withHCMPoint:(HCMPoint *)destination {
  jdouble pathBearing = [((HCMPoint *) nil_chk(start)) bearingToWithHCMPoint:destination];
  HCMPoint *cross = nil;
  if (pathBearing > bearing_ - HCMGate_BEARING_RANGE && pathBearing < bearing_ + HCMGate_BEARING_RANGE) {
    cross = HCMPoint_intersectSimpleWithHCMPoint_withHCMPoint_withHCMPoint_withHCMPoint_(leftPoint_, rightPoint_, start, destination);
    if (cross != nil) {
      jdouble distance = [start distanceToWithHCMPoint:cross];
      jdouble timeDifference = ((HCMPoint *) nil_chk(destination))->timestamp_ - start->timestamp_;
      jdouble acceleration = (destination->speed_ - start->speed_) / timeDifference;
      jdouble time = HCMPhysics_timeWithDouble_withDouble_withDouble_(distance, start->speed_, acceleration);
      cross->generated_ = YES;
      cross->speed_ = start->speed_ + acceleration * time;
      cross->bearing_ = [start bearingToWithHCMPoint:destination];
      cross->timestamp_ = start->timestamp_ + time;
      cross->lapDistance_ = start->lapDistance_ + distance;
      cross->lapTime_ = start->lapTime_ + time;
      cross->splitTime_ = start->splitTime_ + time;
    }
  }
  return cross;
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(leftPoint_);
  RELEASE_(rightPoint_);
  [super dealloc];
}

- (void)copyAllFieldsTo:(HCMGate *)other {
  [super copyAllFieldsTo:other];
  HCMGate_set_type_(other, type_);
  other->splitNumber_ = splitNumber_;
  HCMGate_set_leftPoint_(other, leftPoint_);
  HCMGate_set_rightPoint_(other, rightPoint_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithHCMGateTypeEnum:withInt:withDouble:withDouble:withDouble:", "Gate", NULL, 0x1, NULL },
    { "crossedWithHCMPoint:withHCMPoint:", "crossed", "Lharrycheung.map.shared.Point;", 0x1, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LINE_WIDTH_", NULL, 0x1a, "I", NULL, .constantValue.asInt = HCMGate_LINE_WIDTH },
    { "BEARING_RANGE_", NULL, 0x1a, "I", NULL, .constantValue.asInt = HCMGate_BEARING_RANGE },
    { "type_", NULL, 0x4, "Lharrycheung.map.shared.GateType;", NULL,  },
    { "splitNumber_", NULL, 0x4, "I", NULL,  },
    { "leftPoint_", NULL, 0x2, "Lharrycheung.map.shared.Point;", NULL,  },
    { "rightPoint_", NULL, 0x2, "Lharrycheung.map.shared.Point;", NULL,  },
  };
  static const J2ObjcClassInfo _HCMGate = { 1, "Gate", "harrycheung.map.shared", NULL, 0x11, 2, methods, 6, fields, 0, NULL};
  return &_HCMGate;
}

@end

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HCMGate)
