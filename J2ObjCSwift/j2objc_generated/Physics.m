//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: Java/src/main/java/harrycheung/map/shared/Physics.java
//

#include "J2ObjC_source.h"
#include "Physics.h"
#include "java/lang/Math.h"

@interface HCMPhysics ()
- (instancetype)init;
@end

@implementation HCMPhysics

- (instancetype)init {
  return [super init];
}

+ (jdouble)distanceWithDouble:(jdouble)velocity
                   withDouble:(jdouble)acceleration
                   withDouble:(jdouble)time {
  return HCMPhysics_distanceWithDouble_withDouble_withDouble_(velocity, acceleration, time);
}

+ (jdouble)timeWithDouble:(jdouble)distance
               withDouble:(jdouble)velocity
               withDouble:(jdouble)acceleration {
  return HCMPhysics_timeWithDouble_withDouble_withDouble_(distance, velocity, acceleration);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Physics", NULL, 0x2, NULL },
    { "distanceWithDouble:withDouble:withDouble:", "distance", "D", 0x9, NULL },
    { "timeWithDouble:withDouble:withDouble:", "time", "D", 0x9, NULL },
  };
  static const J2ObjcClassInfo _HCMPhysics = { 1, "Physics", "harrycheung.map.shared", NULL, 0x11, 3, methods, 0, NULL, 0, NULL};
  return &_HCMPhysics;
}

@end

jdouble HCMPhysics_distanceWithDouble_withDouble_withDouble_(jdouble velocity, jdouble acceleration, jdouble time) {
  HCMPhysics_init();
  return velocity * time + (acceleration * time * time) / 2;
}

jdouble HCMPhysics_timeWithDouble_withDouble_withDouble_(jdouble distance, jdouble velocity, jdouble acceleration) {
  HCMPhysics_init();
  if (acceleration == 0) {
    return distance / velocity;
  }
  else {
    return (-velocity + JavaLangMath_sqrtWithDouble_(velocity * velocity + 2 * acceleration * distance)) / acceleration;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(HCMPhysics)
